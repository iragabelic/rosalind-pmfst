##first uzima "prvi" kmer, a second idući
##ako first nije među ključevima u D, dodaje
##se, a ako je u value se dodaje second
##leksikografski sortiramo ključeve i stavljamo ,
##f nam služi da ne bi ispisa "{first}"
def deBrujinGraph(k, text):
    D = {}
    for i in range(0, len(text) - k + 1):
        first = text[i : (i + k - 1)]
        second = text[(i + 1) : (i + k)]
        if first not in D:
            D[first] = [second]
        else:
            D[first].append(second)
    out = ""
    keys = sorted(D.keys())
    for first in keys:
        second = ",".join(sorted(D[first]))
        out = out + f"{first} -> {second}\n"
    return out
print(deBrujinGraph(12, """GGCTATAGTTCACTTGATGGATCATCTATCAACTAGTGGGTTCCATAGGTGCGTTCGCGCCTTCGGCACTTGACCAAACCACGCCAAACCGATAAACGATGAATCTCTCTATGAGTATTCAACTCTGTGAAATCCTAATCCGCGAAGAGGTTTTCCGTTCTGGGGAAGGAAAGATACTTCTGGTGCCGACACCGTCTGCCACGCTTATACCTTGATAGGATTTGGACATCGCGGAAACTCTTGCTGAGCGAGCTTTATAAGGATCAACAAGACCACTGAAAGCGGTTTGCGATGTTCGGCGGAGGCAATCCCTTTATTGAAAGACAGAACCTTCCCTGCATATATTTGTTCGGTTGAATCTACTCGCATGAGGCGGGCCGTTCTATATGGGATTTAATATTTGGACCCCATGCCGTCAGGGCATGCACTTGATGGCTAGGCACCTTAGGATTCCAGGGATTGGGTACGTCTGGCCACGGTACCGGGGATGGGGCGCTCCCTGATGGCTTTCCTCCGACCTCAAGTTCCTCGCGCGGTCCGCGCTACTAGAGTCCATAAGTCCCATGGATGGATGGGTCTAGACTTCGGGCGTCTTTCACGATGCTGTTAACTAGGCCGAGGGAGTATACCGACGGAATTCTGTCCTCTAAGCCTGTCTCACTGTGTCGGTTCCTCTTTCTAAAAAAACTATAGAGACTGTTCGGCTGTATTCTAAACACCCCGAGGTGGCTTACCACGCCGCATCACTATCTAAATTCGCTGTGCTGGGTTCGCGATGGATGCACCCCGACGCTAGCTTGGCGGTTCAGCCAGTGATTCCTCGTCGGGAACTCATCATTCACAGAACCATCTTTACCGAGGTGCCGGAGAGTGTCTGGGATACTGTGACTGGACGACTCAGCCGTATTACGTCGTTGCCGTCAGCACAGTGGAACGATCGCTGGACGATGGCCTTAGATGAGCACCTCTTGCCATGGGTGCAGTAAGCTAGTTCTTTTTGTATACAGGATGTTGTGGAGACAAACGGTAGGAACTACTTCGGCTCGACTCCAAGGACGACCAAATCTACAGATCCTAGAAGTCAGTACCCAGCACAGCCGAGGACGGACAATGGCTAACGATGATCTCGGGATTGGACTCTCATGAACACGCGTCGCAAACTTGGAGACGTGGCTTGAAGGTAGAATGGAAAGTAATCTCGCCATTAACTAGAGGTACTACTTCGGCGGGCCCGTGGGGCGTGTACCCTCACCTACTTAGTACATTCCCATTAATAGTGTATGGCGCTTCGACGCTCCCACGTAAGTTGTTGCGAAATCCTCAGACTGGGAACCTGTGATTGCTAGCAGTCACCGGCATCTCCTAAAACAGTGCAGTCTTGCACATGGGAGGTCTCTGATACACGTGCCTATGAGGCCGCAACGCTCTAATGGAAGGGTCCGCAAGTATGCTCACGGAACCACTGGACCGTGCCGACCCGATCCAAATGTTGAGTGGACGCGTGTTAAGACCGCATAAATACAAGAGTTTGTACACGCTATCCACCGCCCCACTTTAAGGTTAACGGCAACCTAACCTTACATCTTACCACGTGGCCCCGAGCCAGAGTCCATGTGACCGTGTTATAGATTCGGAAAGTCTCATGATACGTATGCTCGCCTAACTACGGTAGGACAGGAGAGGCCTAAAGTCTGACTGGGTGCCCTCGCACACGGTCCCTTCGCACTGTTACCAGTCTAGAAAGCAAAGGATACTTCTCGAAGCTGCCAGTTAACCCAATGGAAATATCCACGCAGCGGGGGCGCTGCCACCTATCGGCTGTTCGAGTGCCAAAATCCCGGAGGGTTCGGATCGAGGAGGATGAGGTGCGTCAATACCAAATTACTCGCGTGCGTAGGCAGTCGTCGAGCACGAGGATTGAAGAGCGAGCGTAAGCCACGAGAGCCACCCACACCACGCAGCTCGCTAGAGATAGCGACTAGCGTTGACGCTACAATAGC"""))
